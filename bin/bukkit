#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__) + "/../lib")

require 'rubygems'
require 'commander/import'

require 'bukkit.rb'

program :version, Bukkit::VERSION
program :description, "A Command Line Interface for CraftBukkit."

command :new do |c|
	c.syntax = "bukkit new my-awesome-server-name [options]"
	c.summary = "Create a new Bukkit server."
	c.description = "Create a new Bukkit server with the given name."
	c.example "Creates a new server with the name 'my-awesome-server-name'.", "bukkit new my-awesome-server-name"
	c.option "--rb", "Create a new server with the recommended build."
	c.option "--beta", "Create a new server with the beta build."
	c.option "--dev", "Create a new server with the dev build."
	c.option "-f", "--force", "Overwrites the chosen directory if it already exists."

	c.action do |args, options|
		rb = options.rb
		beta = options.beta
		dev = options.dev
		force = options.force

		name = args.shift

		new_options = Hash.new

		# If it doesn't have a name then just stop them right there.
		abort "You didn't enter a server name.\nTry `bukkit new my-awesome-server-name`." if name.nil?

		# Add the build to the new_options hash.
		if rb
			new_options.merge!(:build => :rb)
		elsif beta
			new_options.merge!(:build => :beta)
		elsif dev
			new_options.merge!(:build => :dev)
		else
			# If the user didn't give a build option then ask for it.
			build = ask "Build [rb/beta/dev]: "
			case build
			when "rb", "recommended"
				new_options.merge!(:build => :rb)
			when "beta"
				new_options.merge!(:build => :beta)
			when "dev", "development"
				new_options.merge!(:build => :dev)
			else
				puts "Invalid build option."
			end
		end

		# Add the force option if it's needed. Adds the bool returned from 'force'.
		force = false if force.nil?
		new_options.merge!(:force => force)

		# Now finally send the options to the method.
		$server = Bukkit::Server.new(name)
		$server.create(new_options)
	end
end